package com.zhanglubao.lol.downloader;import android.content.Intent;import com.alibaba.fastjson.JSON;import com.zhanglubao.lol.config.ZLBConfiguration;import com.zhanglubao.lol.downloader.entity.ResultEntity;import com.zhanglubao.lol.downloader.entity.SingleEntity;import com.zhanglubao.lol.downloader.util.ConfigUtil;import com.zhanglubao.lol.downloader.util.Logger;import com.zhanglubao.lol.util.PlayerUtil;import com.zhanglubao.lol.util.PreferenceUtil;import com.zhanglubao.lol.util.URLContainer;import net.chilicat.m3u8.Element;import net.chilicat.m3u8.Playlist;import org.json.JSONObject;import java.io.BufferedWriter;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStreamWriter;import java.net.HttpURLConnection;import java.net.SocketTimeoutException;import java.net.URL;import java.net.UnknownHostException;import java.text.DecimalFormat;public class DownloadUtils {    private static final String TAG = "Download_Utils";    /**     * TODO 获得真实地址     *     * @param segUrl     * @return 302跳转后的地址     */    public static String getLocation(String segUrl) {        try {            URL url = new URL(segUrl);            HttpURLConnection conn = (HttpURLConnection) url.openConnection();            conn.setReadTimeout(20000);            conn.setConnectTimeout(15000);            conn.setInstanceFollowRedirects(false);            conn.setRequestMethod("HEAD");            return conn.getHeaderField("Location");        } catch (IOException e) {            Logger.e(TAG, "DownloadUtils#getLocation()", e);        }        return null;    }    private static int getLengthFromURL(String url) {        if (url != null && url.length() != 0) {            HttpURLConnection con;            try {                con = (HttpURLConnection) new URL(url).openConnection();                con.setConnectTimeout(ConfigUtil.TIMEOUT);                con.setReadTimeout(ConfigUtil.TIMEOUT);                con.setAllowUserInteraction(true);                con.connect();                int rcode = con.getResponseCode();                Logger.d(TAG, "responseCode:" + rcode);                if (rcode != HttpURLConnection.HTTP_NOT_FOUND                        && rcode != HttpURLConnection.HTTP_FORBIDDEN) {                    return con.getContentLength();                }            } catch (IOException e) {                Logger.e("DownloadFlow", "FileDownloadThread: getInputStreamFromURL(): error: " + e.toString());                Logger.e(TAG, "getInputStreamFromURL()", e);            }        }        return 0;    }    public static Playlist getPlaylist(String m3u8url) {        try {            URL url = new URL(m3u8url);            Logger.d("DownloadFlow", "download_url: " + url);            HttpURLConnection conn = (HttpURLConnection) url.openConnection();            conn.setConnectTimeout(ConfigUtil.TIMEOUT);            conn.setReadTimeout(ConfigUtil.TIMEOUT);            if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {                return null;            } else if (conn.getResponseCode() == HttpURLConnection.HTTP_GONE) {                InputStream is = conn.getErrorStream();                double d = Double.parseDouble(PlayerUtil                        .convertStreamToString(is));                URLContainer.TIMESTAMP = (long) d - System.currentTimeMillis()                        / 1000;                getPlaylist(m3u8url);                if (is != null) {                    is.close();                    is = null;                }            }            String m3u8 = PlayerUtil                    .convertStreamToString(conn.getInputStream());            Playlist playlist = Playlist.parse(m3u8);            return playlist;        } catch (SocketTimeoutException e) {            return null;        } catch (UnknownHostException e) {            return null;        } catch (Exception e) {            return null;        }    }    public static boolean getDownloadData(DownloadInfo info) {        Logger.d("DownloadFlow", "DownloadUtil: getDownloadData()");        try {            URL url = new URL(URLContainer.getDownloadURL(info.videoid));            Logger.d("DownloadFlow", "download_url: " + url);            HttpURLConnection conn = (HttpURLConnection) url.openConnection();            conn.setConnectTimeout(ConfigUtil.TIMEOUT);            conn.setReadTimeout(ConfigUtil.TIMEOUT);            if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {                info.setExceptionId(DownloadInfo.EXCEPTION_HTTP_NOT_FOUND);                return false;            } else if (conn.getResponseCode() == HttpURLConnection.HTTP_GONE) {                InputStream is = conn.getErrorStream();                double d = Double.parseDouble(PlayerUtil                        .convertStreamToString(is));                URLContainer.TIMESTAMP = (long) d - System.currentTimeMillis()                        / 1000;                getDownloadData(info);                if (is != null) {                    is.close();                    is = null;                }            }            Logger.d(TAG, conn.getResponseCode() + "");            String json = PlayerUtil                    .convertStreamToString(conn.getInputStream());            ResultEntity resultEntity = JSON.parseObject(json, ResultEntity.class);            SingleEntity hd = resultEntity.getHd();            Playlist playlist = getPlaylist(hd.getUrl());            final int segCount = playlist.getElements().size();            info.segCount = segCount;            long[] segsSize = new long[segCount];            String[] segsUrl = new String[segCount];            double[] segsSeconds = new double[segCount];            long size = 0l;            for (int i = 0; i < segCount; i++) {                int segId = i;                Element element = playlist.getElements().get(i);                info.seconds += element.getDuration();                segsSeconds[segId] = element.getDuration();                String tempurl = element.getURI().toString();                if (!tempurl.startsWith("http")) {                    String m3u8url = hd.getUrl();                    tempurl = m3u8url.substring(0, m3u8url.lastIndexOf("/")+1) + tempurl;                    segsUrl[segId] = tempurl;                } else {                    segsUrl[segId] = tempurl;                }            }            info.segsSize = segsSize;            info.segsUrl = segsUrl;            info.segsSeconds = segsSeconds;            info.size = Math.round(info.seconds * 0.15D * 1024.0D * 1024.0D);            info.getUrlTime = System.currentTimeMillis();        } catch (SocketTimeoutException e) {            Logger.e(TAG, "getDownloadData():" + info.title + "/"                    + info.videoid, e);            info.setExceptionId(DownloadInfo.EXCEPTION_TIMEOUT);            return false;        } catch (UnknownHostException e) {            Logger.e(TAG, "getDownloadData():" + info.title + "/"                    + info.videoid, e);            info.setExceptionId(DownloadInfo.EXCEPTION_NO_NETWORK);            return false;        } catch (Exception e) {            Logger.e(TAG, "getDownloadData():" + info.title + "/"                    + info.videoid, e);            info.setExceptionId(DownloadInfo.EXCEPTION_HTTP_NOT_FOUND);            return false;        }        return true;    }//    /**//     * TODO 获得下载地址和下载信息//     *//     * @param info//     * @return//     *///    public static boolean getDownloadData(DownloadInfo info) {//        Logger.d("DownloadFlow", "DownloadUtil: getDownloadData()");//        try {//            URL url = new URL(URLContainer.getDownloadURL(info.videoid));//            Logger.d("DownloadFlow", "download_url: " + url);//            HttpURLConnection conn = (HttpURLConnection) url.openConnection();//            conn.setConnectTimeout(ConfigUtil.TIMEOUT);//            conn.setReadTimeout(ConfigUtil.TIMEOUT);//            if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {//                info.setExceptionId(DownloadInfo.EXCEPTION_HTTP_NOT_FOUND);//                return false;//            } else if (conn.getResponseCode() == HttpURLConnection.HTTP_GONE) {//                InputStream is = conn.getErrorStream();//                double d = Double.parseDouble(PlayerUtil//                        .convertStreamToString(is));//                URLContainer.TIMESTAMP = (long) d - System.currentTimeMillis()//                        / 1000;//                getDownloadData(info);//                if (is != null) {//                    is.close();//                    is = null;//                }//            }//            Logger.d(TAG, conn.getResponseCode() + "");//            String json = PlayerUtil//                    .convertStreamToString(conn.getInputStream());//            ResultEntity resultEntity = JSON.parseObject(json, ResultEntity.class);//            SingleEntity hd = resultEntity.getHd();//            final int segCount = hd.getData().size();// 分片数量//            info.seconds = hd.getSeconds();//            info.segCount = segCount;//            long[] segsSize = new long[segCount];//            String[] segsUrl = new String[segCount];//            double[] segsSeconds = new double[segCount];//            long size = 0l;//            for (int i = 0; i < segCount; i++) {////                SegEntity segEntity = hd.getData().get(i);//                int segId = i;//                segsUrl[segId] = segEntity.getUrl();//                segsSeconds[segId] = segEntity.getSeconds();//                long segSize = segEntity.getSize();//                segsSize[segId] = segSize;//                size += segSize;//            }//            info.segsSize = segsSize;//            info.segsUrl = segsUrl;//            info.segsSeconds = segsSeconds;//            info.size = size;//            info.getUrlTime = System.currentTimeMillis();////        } catch (SocketTimeoutException e) {//            Logger.e(TAG, "getDownloadData():" + info.title + "/"//                    + info.videoid, e);//            info.setExceptionId(DownloadInfo.EXCEPTION_TIMEOUT);//            return false;//        } catch (UnknownHostException e) {//            Logger.e(TAG, "getDownloadData():" + info.title + "/"//                    + info.videoid, e);//            info.setExceptionId(DownloadInfo.EXCEPTION_NO_NETWORK);//            return false;//        } catch (Exception e) {//            Logger.e(TAG, "getDownloadData():" + info.title + "/"//                    + info.videoid, e);//            info.setExceptionId(DownloadInfo.EXCEPTION_HTTP_NOT_FOUND);//            return false;//        }//        return true;//    }    /**     * TODO 获得视频信息     *     * @param info     * @return     */    public static boolean getVideoInfo(DownloadInfo info) {        Logger.d("DownloadFlow", "DownloadUtil: getVideoInfo()");        try {            URL url = new URL(                    URLContainer.getVideoDownloadDetailUrl(info.videoid));            HttpURLConnection conn = (HttpURLConnection) url.openConnection();            conn.setConnectTimeout(ConfigUtil.TIMEOUT);            conn.setReadTimeout(ConfigUtil.TIMEOUT);            if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {                info.setExceptionId(DownloadInfo.EXCEPTION_HTTP_NOT_FOUND);                return false;            }            String json = PlayerUtil                    .convertStreamToString(conn.getInputStream());            JSONObject o = new JSONObject(json);            o = o.getJSONObject("results");            info.albumid = o.optString("albumid");            info.albumname = o.optString("albumname");            info.album_videoseq = o.optInt("album_videoseq");            info.albumepisode_total = o.optInt("albumepisode_total");            info.cats = o.optString("cats");            info.imgUrl = o.optString("img_hd");            return true;        } catch (Exception e) {            Logger.e(TAG, "DownloadUtils#getShowInfo()", e);            info.setExceptionId(DownloadInfo.EXCEPTION_UNKNOWN_ERROR);            return false;        }    }    /***     * TODO 创建视频缩略图     *     * @param imgUrl     */    public static void createVideoThumbnail(String imgUrl, String savePath) {        Logger.d("DownloadFlow", "DownloadUtil: createVideoThumbnail()");        File f = null;        Logger.d(TAG, "createVideoThumbnail()/imgUrl ：" + imgUrl);        f = new File(savePath);        if (!f.exists())            f.mkdirs();        f = new File(savePath + IDownload.THUMBNAIL_NAME);        if (f.exists()) {            if (f.length() != 0)                return;            f.delete();        }        FileOutputStream fos = null;        InputStream i = null;        HttpURLConnection httConn;        try {            URL url = new URL(imgUrl);            httConn = (HttpURLConnection) url.openConnection();            httConn.setConnectTimeout(15 * 1000);            httConn.setReadTimeout(15 * 1000);            httConn.setDoInput(true);            httConn.connect();            i = (InputStream) httConn.getInputStream();            fos = new FileOutputStream(f);            byte[] buf = new byte[1024];            int len = 0;            while ((len = i.read(buf)) > 0) {                fos.write(buf, 0, len);            }            fos.flush();            // 缩略图下载完成的广播            ZLBConfiguration.context.sendBroadcast(new Intent(                    IDownload.ACTION_THUMBNAIL_COMPLETE));        } catch (Exception e) {            Logger.e(TAG, "createVideoThumbnail()", e);            if (f.exists())                f.delete();        } finally {            try {                if (fos != null)                    fos.close();                if (i != null)                    i.close();            } catch (IOException e) {            }        }    }    /**     * 创建下载文件     *     * @param info     * @return 是否创建成功     */    public static boolean makeDownloadInfoFile(DownloadInfo info) {        Logger.d("DownloadFlow", "DownloadUtil: makeDownloadInfoFile()");        if (info == null)            return false;        BufferedWriter w = null;        try {            File f = new File(info.savePath + IDownload.FILE_NAME);            if (!f.exists()) {                File d = new File(info.savePath);                if (!d.exists())                    d.mkdirs();            }            w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(                    f)));            w.write(info.toString());        } catch (FileNotFoundException e) {// SD卡被拔出            Logger.e(TAG, e);            info.setExceptionId(DownloadInfo.EXCEPTION_NO_SDCARD);            return false;        } catch (IOException e) {            Logger.e(TAG, e);            info.setExceptionId(DownloadInfo.EXCEPTION_WRITE_ERROR);            return false;        } finally {            try {                if (w != null) {                    w.close();                }            } catch (IOException e) {                Logger.e(TAG, e);            }        }        return true;    }    /**     * TODO 创建M3U8文件     *     * @param info     */    public static void makeM3U8File(DownloadInfo info) {        Logger.d("DownloadFlow", "DownloadUtil: makeM3U8File()");        File f = new File(info.savePath);        if (!f.exists()) {            f.mkdirs();        }        f = new File(info.savePath + "zhanglubao.m3u8");        if (f.exists() && f.isFile()) {            f.delete();        }        BufferedWriter bw = null;        try {            f.createNewFile();            bw = new BufferedWriter(new OutputStreamWriter(                    new FileOutputStream(f)));            bw.write("#EXTM3U\r\n");            final double[] s = info.segsSeconds;            double lastseconds = 0;            for (int i = 0, n = s.length; i < n; i++) {                if (s[i] > lastseconds) {                    lastseconds = s[i];                }            }            lastseconds = lastseconds + 2;            bw.write("#EXT-X-TARGETDURATION:" + lastseconds + "\r\n");            bw.write("#EXT-X-VERSION:3\r\n");            for (int i = 0, n = s.length; i < n; i++) {                bw.write("#EXTINF:" + s[i] + "\r\n");                bw.write(info.savePath + (i + 1) + "."                        + DownloadInfo.FORMAT_POSTFIX[info.format] + "\r\n");            }            bw.write("#EXT-X-ENDLIST\r\n");        } catch (IOException e) {            Logger.e(TAG, "makeM3U8File fail", e);        } finally {            try {                if (bw != null)                    bw.close();            } catch (IOException e) {            }        }    }    /**     * 保留一位小数格式化对象     */    private static final DecimalFormat df = new DecimalFormat("0.0");    /**     * 获得进度     *     * @param info     * @return 保留一位小数     */    public static String getProgress(DownloadInfo info) {        return df.format(info.getProgress());    }    public static int getDownloadFormat() {        int i;        try {            i = PreferenceUtil.getPreferenceInt("definition");        } catch (Exception e) {            i = Integer.parseInt(PreferenceUtil.getPreference("definition"));        }        if (i == 0)            i = ConfigUtil.FORMAT_HD;        return i;    }    public static void setDownloadFormat(int format) {        PreferenceUtil.savePreference("definition", format);    }}